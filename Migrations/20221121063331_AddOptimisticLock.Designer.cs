// <auto-generated />
using System;
using CustMgmt.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustMgmt.Migrations
{
    [DbContext(typeof(CustMgmtDbContext))]
    [Migration("20221121063331_AddOptimisticLock")]
    partial class AddOptimisticLock
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustMgmt.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73d5b5f5-3008-49b7-b0d6-cc337f1a3330"),
                            Address = "Customer 1 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 887, DateTimeKind.Unspecified),
                            Email = "Customer1@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 1",
                            Status = 1002
                        },
                        new
                        {
                            Id = new Guid("8d04a48e-be4e-468e-8ce2-3ac0a0c79549"),
                            Address = "Customer 2 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 817, DateTimeKind.Unspecified),
                            Email = "Customer2@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 2",
                            Status = 1002
                        },
                        new
                        {
                            Id = new Guid("7406b13e-a793-4b12-84cb-7fe2a694b9aa"),
                            Address = "Customer 3 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 13, 33, 887, DateTimeKind.Unspecified),
                            Email = "Customer3@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 3",
                            Status = 1003
                        },
                        new
                        {
                            Id = new Guid("84556abd-1a6c-4d20-a8a7-271dd4393b2e"),
                            Address = "Customer 4 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 24, 33, 887, DateTimeKind.Unspecified),
                            Email = "Customer4@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 4",
                            Status = 1001
                        },
                        new
                        {
                            Id = new Guid("2029db57-c15c-4c0c-80a0-c811b7995cb4"),
                            Address = "Customer 5 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 11, 23, 33, 887, DateTimeKind.Unspecified),
                            Email = "Customer5@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 5",
                            Status = 1002
                        },
                        new
                        {
                            Id = new Guid("5f978cf6-df6d-47a9-8ef2-d2723cc29cc8"),
                            Address = "Customer 6 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 23, 887, DateTimeKind.Unspecified),
                            Email = "Customer6@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 6",
                            Status = 1001
                        },
                        new
                        {
                            Id = new Guid("90ee3976-d672-4411-ae1c-3267baa940eb"),
                            Address = "Customer 7 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 53, 887, DateTimeKind.Unspecified),
                            Email = "Customer7@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 7",
                            Status = 1003
                        },
                        new
                        {
                            Id = new Guid("4633a79c-9f4a-48d5-ae5a-70945fb8583c"),
                            Address = "Customer 8 Address",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 817, DateTimeKind.Unspecified),
                            Email = "Customer8@xxx.com",
                            IsDeleted = false,
                            Name = "Customer 8",
                            Status = 1001
                        });
                });

            modelBuilder.Entity("CustMgmt.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d8ebda9-2634-4c0f-9469-0695d6132153"),
                            Content = "Content of Note 1",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 1, DateTimeKind.Unspecified),
                            CustomerId = new Guid("73d5b5f5-3008-49b7-b0d6-cc337f1a3330"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1ed47697-aa7d-48c2-aa39-305d0e13b3aa"),
                            Content = "Content of Note 2",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 2, DateTimeKind.Unspecified),
                            CustomerId = new Guid("73d5b5f5-3008-49b7-b0d6-cc337f1a3330"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5f82c852-375d-4926-a3b7-84b63fc1bfae"),
                            Content = "Content of Note 3",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 3, DateTimeKind.Unspecified),
                            CustomerId = new Guid("8d04a48e-be4e-468e-8ce2-3ac0a0c79549"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("418a5b20-460b-4604-be17-2b0809e19acd"),
                            Content = "Content of Note 4",
                            CreatedAt = new DateTime(2022, 11, 21, 10, 23, 33, 11, DateTimeKind.Unspecified),
                            CustomerId = new Guid("8d04a48e-be4e-468e-8ce2-3ac0a0c79549"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CustMgmt.Entities.Note", b =>
                {
                    b.HasOne("CustMgmt.Entities.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustMgmt.Entities.Customer", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
